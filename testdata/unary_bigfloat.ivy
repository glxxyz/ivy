# Copyright 2014 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Unary operations on floats. The simplest but hacky way to get a float is to
# take a square root.

)format "%.16g"
sqrt 2
	1.414213562373095

)format "%.16g"
+sqrt 2
	1.414213562373095

)format "%.16g"
-sqrt 2
	-1.414213562373095

)format "%.16g"
/sqrt 2
	0.7071067811865475

)format "%.16g"
/-sqrt 2
	-0.7071067811865475

)format "%.16g"
**log e
	2.718281828459045

# Was bug - stopped when series hit 0. Issue 96
**-1
	0.367879441171

# Was bug - overwrote argument. Issue 30.
log pi
pi
	1.14472988585
	3.14159265359

(**pi) - pi
	19.9990999792

not sqrt 2
	0

log 1
	0

(2 log 8) - 3
	0

(5 log 5**12345) - 12345
	0

0, (-12345 + 5 log 5**12345) rho 1
	0

(2 log 8) rho 1
	1 1 1

sin 1e4
	-0.305614388888

)format "%.8f"
sin (pi/4)*(1-iota 9)
	0.00000000 -0.70710678 -1.00000000 -0.70710678 0.00000000 0.70710678 1.00000000 0.70710678 0.00000000

)format "%.8f"
cos (pi/4)*(1-iota 9)
	1.00000000 0.70710678 0.00000000 -0.70710678 -1.00000000 -0.70710678 0.00000000 0.70710678 1.00000000

)format "%.8f"
tan 1 - iota 6
	0.00000000 -1.55740772 2.18503986 0.14254654 -1.15782128 3.38051501

)format "%.8f"
asin .2 * -6 + iota 11
	-1.57079633 -0.92729522 -0.64350111 -0.41151685 -0.20135792 0.00000000 0.20135792 0.41151685 0.64350111 0.92729522 1.57079633

)format "%.8f"
acos .2 * -6 + iota 11
	3.14159265 2.49809154 2.21429744 1.98231317 1.77215425 1.57079633 1.36943841 1.15927948 0.92729522 0.64350111 0.00000000

)format "%.8f"
atan -6 + iota 11
	-1.37340077 -1.32581766 -1.24904577 -1.10714872 -0.78539816 0.00000000 0.78539816 1.10714872 1.24904577 1.32581766 1.37340077

# Double-check atan values near 1, which use a different algorithm (see value/asin.go).
atan .9 .95 .99 1 1.01 1.05 1.1
	0.732815101787 0.759762754876 0.780373080067 0.785398163397 0.790373246728 0.80978357257 0.832981266674

)format "%.8f"
sinh -6 + iota 11
	-74.20321058 -27.28991720 -10.01787493 -3.62686041 -1.17520119 0.00000000 1.17520119 3.62686041 10.01787493 27.28991720 74.20321058

)format "%.8f"
cosh -6 + iota 11
	74.20994852 27.30823284 10.06766200 3.76219569 1.54308063 1.00000000 1.54308063 3.76219569 10.06766200 27.30823284 74.20994852

)format "%.8f"
tanh -6 + iota 11
	-0.99990920 -0.99932930 -0.99505475 -0.96402758 -0.76159416 0.00000000 0.76159416 0.96402758 0.99505475 0.99932930 0.99990920

sgn -sqrt 2
	-1

sgn sqrt 2
	1

)format "%.8f"
log iota 6
	0.00000000 0.69314718 1.09861229 1.38629436 1.60943791 1.79175947

log 1e1000
	2302.58509299

log 1e-1000
	-2302.58509299

)format "%.16g"
abs -sqrt 2
	1.414213562373095


)format "%.16g"
abs sqrt 2
	1.414213562373095

)format "%.16g"
floor -sqrt 2
	-2

)format "%.16g"
floor sqrt 2
	1

)format "%.16g"
ceil -sqrt 2
	-1

)format "%.16g"
ceil sqrt 2
	2

)format "%.16g"
rho sqrt 2
	0

)format "%.16g"
,sqrt(2)
	1.414213562373095

# Results should be integers (the cutover is defined in BigFloat.shrink and is arbitrary).
sqrt 1e10 1e20 1e40 1e60
	100000 10000000000 100000000000000000000 1000000000000000000000000000000

# Results should be floats.
sqrt 1e80 1e100
	1e+40 1e+50

# Results should always be floats.
sqrt 2e10 2e20 2e40 2e60
	141421.356237 14142135623.7 1.41421356237e+20 1.41421356237e+30

# Was a bug.
sqrt(0)
	0

# Successive approximations to e.
(float 1+10**-iota 9) ** 10**iota 9
	2.5937424601 2.70481382942 2.71692393224 2.71814592683 2.71826823717 2.71828046932 2.71828169254 2.71828181487 2.7182818271

# http://www.futilitycloset.com/2015/06/28/made-to-order-4/
# Decimal expansion gives Fibonacci sequence every 24 digits.
# Explanation at https://news.ycombinator.com/item?id=9816375
)format '%.1000g'
/999999999999999999999998999999999999999999999999
	e-48

# Test printing of huge numbers.
sqrt 1e50000
	1e+25000
